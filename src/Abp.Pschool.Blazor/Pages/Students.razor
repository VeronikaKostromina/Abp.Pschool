@page "/students"
@attribute [Authorize(PschoolPermissions.Students.Default)]
@using Volo.Abp.Application.Dtos
@using Abp.Pschool.Students
@using Abp.Pschool.Localization
@using Abp.Pschool.Permissions
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<PschoolResource> L
@inject AbpBlazorMessageLocalizerHelper<PschoolResource> LH
@inherits AbpCrudPageBase<IStudentAppService, StudentDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateStudentDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Students"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
            @if (HasCreatePermission)
            {
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">@L["NewStudent"]</Button>
            }
            </Column>
        </Row> 
    </CardHeader>
    <CardBody>
        <DataGrid TItem="StudentDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="StudentDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="StudentDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="StudentDto"
                                          Text="@L["Edit"]"
                                          Visible=HasUpdatePermission
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="StudentDto"
                                          Text="@L["Delete"]"
                                          Visible=HasDeletePermission
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />                         
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="StudentDto"
                                Field="@nameof(StudentDto.FirstName)"
                                Caption="@L["FirstName"]"></DataGridColumn>
                <DataGridColumn TItem="StudentDto"
                                Field="@nameof(StudentDto.LastName)"
                                Caption="@L["LastName"]"></DataGridColumn>
                <DataGridColumn TItem="StudentDto"
                                Field="@nameof(StudentDto.Type)"
                                Caption="@L["Type"]">
                    <DisplayTemplate>
                        @L[$"Enum:StudentMarkType.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="StudentDto"
                                Field="@nameof(StudentDto.ClassNumber)"
                                Caption="@L["ClassNumber"]"></DataGridColumn>
                <DataGridColumn TItem="StudentDto"
                                Field="@nameof(StudentDto.Email)"
                                Caption="@L["Email"]">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewStudent"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FirstName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.FirstName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastName"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.LastName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="StudentMarkType" @bind-SelectedValue="@NewEntity.Type">
                            @foreach (int bookTypeValue in Enum.GetValues(typeof(StudentMarkType)))
                            {
                                <SelectItem TValue="StudentMarkType" Value="@((StudentMarkType) bookTypeValue)">
                                    @L[$"Enum:StudentMarkType.{bookTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Email"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Email">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ClassNumber"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewEntity.ClassNumber">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.FirstName @EditingEntity.LastName</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["FirstName"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.FirstName">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["LastName"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.LastName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="StudentMarkType" @bind-SelectedValue="@NewEntity.Type">
                            @foreach (int bookTypeValue in Enum.GetValues(typeof(StudentMarkType)))
                            {
                                <SelectItem TValue="StudentMarkType" Value="@((StudentMarkType) bookTypeValue)">
                                    @L[$"Enum:StudentMarkType.{bookTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Email"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Email">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ClassNumber"]</FieldLabel>
                            <NumericEdit TValue="int" @bind-Value="NewEntity.ClassNumber">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>


@code
{
    public Students()
    {
        CreatePolicyName = PschoolPermissions.Students.Create;
        UpdatePolicyName = PschoolPermissions.Students.Edit;
        DeletePolicyName = PschoolPermissions.Students.Delete;
    }
}